# -*- coding: utf-8 -*-

"""
Django settings for pywot project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import io, os, sys
import json

if sys.version_info.major == 2:
    sys.setdefaultencoding('utf-8')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$otgfa=&5jdi*z0a2g$s(^--6vjbh5b%99g3o*+cqiy14oju+7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'master.apps.MasterConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'pywot.middlewares.jsonerror.JsonErrorMiddleware'
]

ROOT_URLCONF = 'pywot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'pywot/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pywot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

with open(os.path.join(BASE_DIR, 'testcase.json'), 'r') as testcase:
    config = json.loads(testcase.read())

    DATABASES = {
        'default': {
            'ENGINE':       'django.db.backends.mysql',
            'NAME':         'django_db',
            'USER':         config['user'],
            'PASSWORD':     config['pass'],
            'HOST':         config['host'],
            'PORT':         config['port'],
        },
        'realtime_db': {
            'ENGINE':       'django.db.backends.mysql',
            'NAME':         'realtime_db',
            'USER':         config['user'],
            'PASSWORD':     config['pass'],
            'HOST':         config['host'],
            'PORT':         config['port'],
        },
        'history_db': {
            'ENGINE':       'django.db.backends.mysql',
            'NAME':         'history_db',
            'USER':         config['user'],
            'PASSWORD':     config['pass'],
            'HOST':         config['host'],
            'PORT':         config['port'],
        },
    }

DATABASE_ROUTERS = [
    'pywot.db.RealtimeDatabaseRouter',
    'pywot.db.HistoryDatabaseRouter',
]



# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Chongqing'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'pywot/static'),
    os.path.join(BASE_DIR, 'upload_files'),
]

CSRF_HEADER_NAME = 'HTTP_X_CSRF_TOKEN'
CSRF_USE_SESSIONS = True

# [How to use sessions](https://docs.djangoproject.com/en/1.11/topics/http/sessions/)
# 启用 Session 失效机制的前提
SESSION_SAVE_EVERY_REQUEST = True
# 只能二选一，Session 在浏览器关闭时失效或超时失效
#SESSION_COOKIE_AGE = 60 * 30 # 30 分钟
SESSION_EXPIRE_AT_BROWSER_CLOSE = True # 关闭浏览器，Session cookie 失效
# 禁止任何页面在<frame>，<iframe>，<object>中展现
# [Clickjacking Protection](https://docs.djangoproject.com/en/dev/ref/clickjacking/)
# https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options#Browser_compatibility
X_FRAME_OPTIONS = 'SAMEORIGIN'
# Access-Control-Allow-Origin
# https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
CORS_ORIGIN_WHITELIST = (
    'google.com',
    'localhost',
    '127.0.0.1',
)
